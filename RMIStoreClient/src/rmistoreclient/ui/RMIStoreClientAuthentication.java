/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rmistoreclient.ui;

import com.sun.org.apache.xml.internal.security.utils.Base64;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JButton;
import static javax.swing.JOptionPane.showMessageDialog;
import rmistore.commons.exceptions.Rejected;
import rmistore.commons.interfaces.Authentication;
import rmistore.commons.interfaces.Bank;
import rmistore.commons.interfaces.CustomerRemote;
import rmistore.commons.interfaces.ServerRemote;
import rmistore.commons.model.Response;
import rmistoreclient.helper.RMIStoreClientCrypto;
import rmistoreclient.helper.RMIStoreClientHelper;
import rmistoreclient.implementations.AccountThreadImpl;
import rmistoreclient.implementations.AuthenticationThreadImpl;
import rmistoreclient.implementations.ClientRemoteImpl;
import rmistoreclient.implementations.CustomerRemoteThreadImpl;
import rmistoreclient.interfaces.Callback;

/**
 *
 * @author davidsoendoro
 */
public class RMIStoreClientAuthentication extends javax.swing.JFrame implements Callback {

    private ServerRemote rmistoreObj;
    private ArrayList<JButton> commandButtons;
    
    private int bitLength = 1024;
    private SecureRandom rnd = new SecureRandom();
    private BigInteger g, p, a;
    private long tStart;
    
    /**
     * Creates new form RMIStoreClientMain
     */
    public RMIStoreClientAuthentication() {
        initComponents();

        populatingCommandButtons();
        
        RMIStoreClientCrypto.GenerateRSAKeys();
        
        new RequestThread(RMIStoreClientHelper.START_AUTH_COMMAND).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldOutput = new javax.swing.JTextField();
        jLabelOutput = new javax.swing.JLabel();
        jButtonPrint = new javax.swing.JButton();
        jProgressBar = new javax.swing.JProgressBar();
        jLabelInput1 = new javax.swing.JLabel();
        jTextFieldInput1 = new javax.swing.JTextField();
        jTextFieldInput2 = new javax.swing.JTextField();
        jLabelInput2 = new javax.swing.JLabel();
        jLabelUsername = new javax.swing.JLabel();
        jTextFieldUsername = new javax.swing.JTextField();
        jLabelPassword = new javax.swing.JLabel();
        jPasswordField = new javax.swing.JPasswordField();
        jButtonLogin = new javax.swing.JButton();
        jLabelStatus = new javax.swing.JLabel();
        jLabelRequestTime = new javax.swing.JLabel();
        jButtonQueue = new javax.swing.JButton();
        jButtonTopQueue = new javax.swing.JButton();
        jButtonStart = new javax.swing.JButton();
        jButtonStop = new javax.swing.JButton();
        jButtonRestart = new javax.swing.JButton();
        jButtonStatus = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButtonReadConfig = new javax.swing.JButton();
        jButtonSetConfig = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelOutput.setText("Output");

        jButtonPrint.setText("Print");
        jButtonPrint.setEnabled(false);
        jButtonPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintActionPerformed(evt);
            }
        });

        jLabelInput1.setText("Input 1");

        jLabelInput2.setText("Input 2");

        jLabelUsername.setText("Username");

        jLabelPassword.setText("Password");

        jButtonLogin.setText("Login");
        jButtonLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoginActionPerformed(evt);
            }
        });

        jLabelStatus.setText("Offline");

        jButtonQueue.setText("Queue");
        jButtonQueue.setEnabled(false);
        jButtonQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQueueActionPerformed(evt);
            }
        });

        jButtonTopQueue.setText("Top Queue");
        jButtonTopQueue.setEnabled(false);
        jButtonTopQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTopQueueActionPerformed(evt);
            }
        });

        jButtonStart.setText("Start");
        jButtonStart.setEnabled(false);
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });

        jButtonStop.setText("Stop");
        jButtonStop.setEnabled(false);
        jButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopActionPerformed(evt);
            }
        });

        jButtonRestart.setText("Restart");
        jButtonRestart.setEnabled(false);
        jButtonRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRestartActionPerformed(evt);
            }
        });

        jButtonStatus.setText("Status");
        jButtonStatus.setEnabled(false);
        jButtonStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStatusActionPerformed(evt);
            }
        });

        jLabel1.setText("Commands");

        jButtonReadConfig.setText("Read Config");
        jButtonReadConfig.setEnabled(false);
        jButtonReadConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReadConfigActionPerformed(evt);
            }
        });

        jButtonSetConfig.setText("Set Config");
        jButtonSetConfig.setEnabled(false);
        jButtonSetConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSetConfigActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabelRequestTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelOutput)
                                .addGap(0, 24, Short.MAX_VALUE)
                                .addComponent(jTextFieldOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButtonLogin)
                            .addComponent(jLabelStatus)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelPassword)
                                    .addComponent(jLabelUsername))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                    .addComponent(jTextFieldUsername)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelInput1)
                                    .addComponent(jLabelInput2))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldInput2)
                                    .addComponent(jTextFieldInput1))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButtonSetConfig, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonTopQueue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonReadConfig, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonRestart, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                                    .addComponent(jButtonStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonPrint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonQueue, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonStart, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                                    .addComponent(jButtonStop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelUsername)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPassword)
                    .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonPrint)
                    .addComponent(jButtonStart))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonLogin)
                    .addComponent(jButtonQueue)
                    .addComponent(jButtonStop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelStatus)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonTopQueue)
                        .addComponent(jButtonRestart)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelOutput)
                    .addComponent(jButtonStatus)
                    .addComponent(jButtonReadConfig))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelInput1)
                    .addComponent(jTextFieldInput1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSetConfig))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelInput2)
                    .addComponent(jTextFieldInput2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRequestTime))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintActionPerformed
        setAllButtonEnabled(false);
        String filename = RMIStoreClientCrypto.AESEncrypt(
                jTextFieldInput1.getText(), RMIStoreClientCrypto.s);
        String printer = RMIStoreClientCrypto.AESEncrypt(
                jTextFieldInput2.getText(), RMIStoreClientCrypto.s);
        
        RMIStoreClientHelper.authenticationObj.print(filename, printer);
    }//GEN-LAST:event_jButtonPrintActionPerformed

    private void jButtonLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoginActionPerformed
        try {
            tStart = System.currentTimeMillis();
            setAllButtonEnabled(false);
            
            p = new BigInteger(bitLength, rnd);
            g = new BigInteger(bitLength, rnd);
            
            RMIStoreClientHelper.authenticationObj.publicValueExchange(p, g);
        } catch (RemoteException ex) {
            Logger.getLogger(RMIStoreClientAuthentication.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonLoginActionPerformed

    private void jButtonQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQueueActionPerformed
        setAllButtonEnabled(false);
        
        RMIStoreClientHelper.authenticationObj.queue();
    }//GEN-LAST:event_jButtonQueueActionPerformed

    private void jButtonTopQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTopQueueActionPerformed
        setAllButtonEnabled(false);
        String job = RMIStoreClientCrypto.AESEncrypt(
                jTextFieldInput1.getText(), RMIStoreClientCrypto.s);
        
        RMIStoreClientHelper.authenticationObj.topQueue(job);
    }//GEN-LAST:event_jButtonTopQueueActionPerformed

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
        setAllButtonEnabled(false);
        
        RMIStoreClientHelper.authenticationObj.start();
    }//GEN-LAST:event_jButtonStartActionPerformed

    private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopActionPerformed
        setAllButtonEnabled(false);
        
        RMIStoreClientHelper.authenticationObj.stop();
    }//GEN-LAST:event_jButtonStopActionPerformed

    private void jButtonRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRestartActionPerformed
        setAllButtonEnabled(false);
        
        RMIStoreClientHelper.authenticationObj.restart();
    }//GEN-LAST:event_jButtonRestartActionPerformed

    private void jButtonStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStatusActionPerformed
        setAllButtonEnabled(false);
        
        RMIStoreClientHelper.authenticationObj.status();
    }//GEN-LAST:event_jButtonStatusActionPerformed

    private void jButtonReadConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReadConfigActionPerformed
        setAllButtonEnabled(false);
        String parameter = RMIStoreClientCrypto.AESEncrypt(
                jTextFieldInput1.getText(), RMIStoreClientCrypto.s);
        
        RMIStoreClientHelper.authenticationObj.readConfig(parameter);
    }//GEN-LAST:event_jButtonReadConfigActionPerformed

    private void jButtonSetConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSetConfigActionPerformed
                setAllButtonEnabled(false);
        String parameter = RMIStoreClientCrypto.AESEncrypt(
                jTextFieldInput1.getText(), RMIStoreClientCrypto.s);
        String value = RMIStoreClientCrypto.AESEncrypt(
                jTextFieldInput2.getText(), RMIStoreClientCrypto.s);
        
        RMIStoreClientHelper.authenticationObj.setConfig(parameter, value);
    }//GEN-LAST:event_jButtonSetConfigActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RMIStoreClientAuthentication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RMIStoreClientAuthentication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RMIStoreClientAuthentication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RMIStoreClientAuthentication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RMIStoreClientAuthentication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonLogin;
    private javax.swing.JButton jButtonPrint;
    private javax.swing.JButton jButtonQueue;
    private javax.swing.JButton jButtonReadConfig;
    private javax.swing.JButton jButtonRestart;
    private javax.swing.JButton jButtonSetConfig;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JButton jButtonStatus;
    private javax.swing.JButton jButtonStop;
    private javax.swing.JButton jButtonTopQueue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelInput1;
    private javax.swing.JLabel jLabelInput2;
    private javax.swing.JLabel jLabelOutput;
    private javax.swing.JLabel jLabelPassword;
    private javax.swing.JLabel jLabelRequestTime;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JLabel jLabelUsername;
    private javax.swing.JPasswordField jPasswordField;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JTextField jTextFieldInput1;
    private javax.swing.JTextField jTextFieldInput2;
    private javax.swing.JTextField jTextFieldOutput;
    private javax.swing.JTextField jTextFieldUsername;
    // End of variables declaration//GEN-END:variables

    @Override
    public void doCallback(Object arguments) {
        Response args = (Response) arguments;
        int status = args.getResponseStatus();
            
        if("print".equals(args.getCallbackName())) {
            if(status == 200) {
                jTextFieldOutput.setText("Print successful!");
            }
            else {
                jTextFieldOutput.setText("Print failed!");
            }
        }
        else if("login".equals(args.getCallbackName())) {
            if(status == 200) {
                jLabelStatus.setText("Online");
            }
            else {
                jLabelStatus.setText("Failed");
            }
            
            long tEnd = System.currentTimeMillis();
            long tDelta = tEnd - tStart;
            double elapsedSeconds = tDelta / 1000.0;
            jLabelRequestTime.setText("Request Time: " + elapsedSeconds + " s");
        }
        else if("publicValueExchange".equals(args.getCallbackName())) {
            if(status == 200) {
                // Public value is transferred, continue with keyExchange mechanism                
                a = new BigInteger(bitLength, rnd);
        
                BigInteger A = g.modPow(a, p);
                
                RMIStoreClientHelper.authenticationObj.keyExchange(A.toString());
            }
        }
        else if("keyExchange".equals(args.getCallbackName())) {
            if(status == 200) {
                BigInteger B = (BigInteger) args.getResponseArg();
                RMIStoreClientCrypto.s = B.modPow(a, p);
                String username = jTextFieldUsername.getText();
                String password = new String(jPasswordField.getPassword());
                String usernameString = RMIStoreClientCrypto.AESEncrypt(
                        username, RMIStoreClientCrypto.s);
                String passwordString = RMIStoreClientCrypto.AESEncrypt(
                        password, RMIStoreClientCrypto.s);
                RMIStoreClientHelper.authenticationObj.login(usernameString, passwordString);
            }
            else {
            }
        }
        setAllButtonEnabled(true);
    }

    private void setAllButtonEnabled(boolean b) {
        for(JButton commandButton : commandButtons) {
            commandButton.setEnabled(b);
        }
    }

    private void populatingCommandButtons() {
        commandButtons = new ArrayList<>();
        commandButtons.add(jButtonPrint);
        commandButtons.add(jButtonQueue);
        commandButtons.add(jButtonReadConfig);
        commandButtons.add(jButtonRestart);
        commandButtons.add(jButtonSetConfig);
        commandButtons.add(jButtonStart);
        commandButtons.add(jButtonStatus);
        commandButtons.add(jButtonStop);
        commandButtons.add(jButtonTopQueue);
    }

    private class RequestThread extends Thread {

        private int command;
        
        public RequestThread(int command) {
            this.command = command;
        }
        
        @Override
        public void run() {
            try {
                switch(command) {
                    case RMIStoreClientHelper.REGISTER_COMMAND:
                        RMIStoreClientHelper.clientRemoteObj = new ClientRemoteImpl();
                        
                        CustomerRemote customerRemote = rmistoreObj.register(jTextFieldOutput.getText(), RMIStoreClientHelper.clientRemoteObj);
                        RMIStoreClientHelper.customerRemoteObj = 
                                new CustomerRemoteThreadImpl(customerRemote);
                        
                        // Connect to Bank
                        Bank rmiBankObj = (Bank)Naming.lookup(
                                RMIStoreClientHelper.RMIBankName);
                        RMIStoreClientHelper.accountObj = new AccountThreadImpl(
                                rmiBankObj.getAccount(jTextFieldOutput.getText()));
                        
                        RMIStoreClientMain rmiStoreClientMain = new RMIStoreClientMain(
                            RMIStoreClientAuthentication.this, jTextFieldOutput.getText());
                        rmiStoreClientMain.setVisible(true);
                        
                        break;
                    case RMIStoreClientHelper.START_AUTH_COMMAND:
                        RMIStoreClientHelper.clientRemoteObj = new ClientRemoteImpl();
                        
                        // Connect to Authentication
                        try {
                            Authentication rmiAuthObj = (Authentication)Naming.lookup(
                                    RMIStoreClientHelper.RMIBankName);
                            RMIStoreClientHelper.authenticationObj = 
                                    new AuthenticationThreadImpl(rmiAuthObj);
                            RMIStoreClientHelper.authenticationObj.callback = 
                                    RMIStoreClientAuthentication.this;

                            RMIStoreClientHelper.authenticationObj.setLoader(jProgressBar);
                            setAllButtonEnabled(true);                        
                        }
                        catch(RemoteException e) {
                            System.out.println(e.getMessage());
                        }
                    
                        break;
                }
            }
            catch (RemoteException | NotBoundException | MalformedURLException | Rejected ex) {
                showMessageDialog(null, ex.getMessage());
                
                Logger.getLogger(RMIStoreClientAuthentication.class.getName()).
                        log(Level.SEVERE, null, ex);
            }
            finally {
                if(command != RMIStoreClientHelper.START_AUTH_COMMAND) {
                    setAllButtonEnabled(true);
                }
            }
        }
        
    }
}
