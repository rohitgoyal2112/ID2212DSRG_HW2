/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rmistoreclient.ui;

import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.swing.JOptionPane.showMessageDialog;
import rmistore.commons.exceptions.Rejected;
import rmistore.commons.interfaces.Authentication;
import rmistore.commons.interfaces.Bank;
import rmistore.commons.interfaces.ClientRemote;
import rmistore.commons.interfaces.CustomerRemote;
import rmistore.commons.interfaces.ServerRemote;
import rmistoreclient.helper.RMIStoreClientHelper;
import rmistoreclient.implementations.AccountThreadImpl;
import rmistoreclient.implementations.AuthenticationThreadImpl;
import rmistoreclient.implementations.ClientRemoteImpl;
import rmistoreclient.implementations.CustomerRemoteThreadImpl;
import rmistoreclient.interfaces.Callback;

/**
 *
 * @author davidsoendoro
 */
public class RMIStoreClientAuthentication extends javax.swing.JFrame implements Callback {

    private ServerRemote rmistoreObj;
    
    /**
     * Creates new form RMIStoreClientMain
     */
    public RMIStoreClientAuthentication() {
        initComponents();

        new RequestThread(RMIStoreClientHelper.START_AUTH_COMMAND).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldOutput = new javax.swing.JTextField();
        jLabelOutput = new javax.swing.JLabel();
        jButtonPrint = new javax.swing.JButton();
        jProgressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelOutput.setText("Output");

        jButtonPrint.setText("Print");
        jButtonPrint.setEnabled(false);
        jButtonPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelOutput)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonPrint))
                .addContainerGap(228, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelOutput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonPrint)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 205, Short.MAX_VALUE)
                .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintActionPerformed
        jButtonPrint.setEnabled(false);
        RMIStoreClientHelper.authenticationObj.print(jTextFieldOutput.getText(), 
                "dummy");
    }//GEN-LAST:event_jButtonPrintActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RMIStoreClientAuthentication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RMIStoreClientAuthentication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RMIStoreClientAuthentication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RMIStoreClientAuthentication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RMIStoreClientAuthentication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonPrint;
    private javax.swing.JLabel jLabelOutput;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JTextField jTextFieldOutput;
    // End of variables declaration//GEN-END:variables

    @Override
    public void doCallback(Object arguments) {
        String args = (String) arguments;
        if(args == "print") {
            jButtonPrint.setEnabled(true);
        }
    }

    private class RequestThread extends Thread {

        private int command;
        
        public RequestThread(int command) {
            this.command = command;
        }
        
        @Override
        public void run() {
            try {
                switch(command) {
                    case RMIStoreClientHelper.REGISTER_COMMAND:
                        RMIStoreClientHelper.clientRemoteObj = new ClientRemoteImpl();
                        
                        CustomerRemote customerRemote = rmistoreObj.register(jTextFieldOutput.getText(), RMIStoreClientHelper.clientRemoteObj);
                        RMIStoreClientHelper.customerRemoteObj = 
                                new CustomerRemoteThreadImpl(customerRemote);
                        
                        // Connect to Bank
                        Bank rmiBankObj = (Bank)Naming.lookup(
                                RMIStoreClientHelper.RMIBankName);
                        RMIStoreClientHelper.accountObj = new AccountThreadImpl(
                                rmiBankObj.getAccount(jTextFieldOutput.getText()));
                        
                        RMIStoreClientMain rmiStoreClientMain = new RMIStoreClientMain(
                            RMIStoreClientAuthentication.this, jTextFieldOutput.getText());
                        rmiStoreClientMain.setVisible(true);
                        
                        break;
                    case RMIStoreClientHelper.START_AUTH_COMMAND:
                        RMIStoreClientHelper.clientRemoteObj = new ClientRemoteImpl();
                        
                        // Connect to Authentication
                        try {
                            Authentication rmiAuthObj = (Authentication)Naming.lookup(
                                    RMIStoreClientHelper.RMIBankName);
                            RMIStoreClientHelper.authenticationObj = 
                                    new AuthenticationThreadImpl(rmiAuthObj);
                            RMIStoreClientHelper.authenticationObj.callback = 
                                    RMIStoreClientAuthentication.this;

                            RMIStoreClientHelper.authenticationObj.setLoader(jProgressBar);
                            jButtonPrint.setEnabled(true);                        
                        }
                        catch(RemoteException e) {
                            System.out.println(e.getMessage());
                        }
                    
                        break;
                }
            }
            catch (RemoteException | NotBoundException | MalformedURLException | Rejected ex) {
                showMessageDialog(null, ex.getMessage());
                
                Logger.getLogger(RMIStoreClientAuthentication.class.getName()).
                        log(Level.SEVERE, null, ex);
            }
            finally {
                if(command != RMIStoreClientHelper.START_AUTH_COMMAND) {
                    jButtonPrint.setEnabled(true);
                }
            }
        }
        
    }
}
