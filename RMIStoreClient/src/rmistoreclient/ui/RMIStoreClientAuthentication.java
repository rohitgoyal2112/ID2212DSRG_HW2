/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rmistoreclient.ui;

import com.sun.org.apache.xml.internal.security.utils.Base64;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JButton;
import static javax.swing.JOptionPane.showMessageDialog;
import rmistore.commons.exceptions.Rejected;
import rmistore.commons.interfaces.Authentication;
import rmistore.commons.interfaces.Bank;
import rmistore.commons.interfaces.CustomerRemote;
import rmistore.commons.interfaces.ServerRemote;
import rmistore.commons.model.Response;
import rmistoreclient.helper.RMIStoreClientHelper;
import rmistoreclient.implementations.AccountThreadImpl;
import rmistoreclient.implementations.AuthenticationThreadImpl;
import rmistoreclient.implementations.ClientRemoteImpl;
import rmistoreclient.implementations.CustomerRemoteThreadImpl;
import rmistoreclient.interfaces.Callback;

/**
 *
 * @author davidsoendoro
 */
public class RMIStoreClientAuthentication extends javax.swing.JFrame implements Callback {

    private ServerRemote rmistoreObj;
    private ArrayList<JButton> commandButtons;
    
    private BigInteger g, p, a;
    
    /**
     * Creates new form RMIStoreClientMain
     */
    public RMIStoreClientAuthentication() {
        initComponents();

        populatingCommandButtons();
        
        new RequestThread(RMIStoreClientHelper.START_AUTH_COMMAND).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldOutput = new javax.swing.JTextField();
        jLabelOutput = new javax.swing.JLabel();
        jButtonPrint = new javax.swing.JButton();
        jProgressBar = new javax.swing.JProgressBar();
        jLabelInput1 = new javax.swing.JLabel();
        jTextFieldInput1 = new javax.swing.JTextField();
        jTextFieldInput2 = new javax.swing.JTextField();
        jLabelInput2 = new javax.swing.JLabel();
        jLabelUsername = new javax.swing.JLabel();
        jTextFieldUsername = new javax.swing.JTextField();
        jLabelPassword = new javax.swing.JLabel();
        jPasswordField = new javax.swing.JPasswordField();
        jButtonLogin = new javax.swing.JButton();
        jLabelStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelOutput.setText("Output");

        jButtonPrint.setText("Print");
        jButtonPrint.setEnabled(false);
        jButtonPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintActionPerformed(evt);
            }
        });

        jLabelInput1.setText("Input 1");

        jLabelInput2.setText("Input 2");

        jLabelUsername.setText("Username");

        jLabelPassword.setText("Password");

        jButtonLogin.setText("Login");
        jButtonLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoginActionPerformed(evt);
            }
        });

        jLabelStatus.setText("Offline");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 250, Short.MAX_VALUE)
                        .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelOutput)
                                    .addComponent(jButtonPrint))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextFieldOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButtonLogin)
                            .addComponent(jLabelStatus)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelPassword)
                                    .addComponent(jLabelUsername))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPasswordField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                    .addComponent(jTextFieldUsername)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelInput1)
                                    .addComponent(jLabelInput2))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldInput2)
                                    .addComponent(jTextFieldInput1))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelUsername))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPassword)
                    .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonLogin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelOutput))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelInput1)
                    .addComponent(jTextFieldInput1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelInput2)
                    .addComponent(jTextFieldInput2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(jButtonPrint)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintActionPerformed
        setAllButtonEnabled(false);
        String filename = jTextFieldInput1.getText();
        String printer = jTextFieldInput2.getText();
        RMIStoreClientHelper.authenticationObj.print(filename, printer);
    }//GEN-LAST:event_jButtonPrintActionPerformed

    private void jButtonLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoginActionPerformed
        setAllButtonEnabled(false);
        
        int bitLength = 1024;
        SecureRandom rnd = new SecureRandom();
        p = new BigInteger("115481693128219746027292404981969544601997551324282642958753451061578742568604732285229496133000193574054800397370858217239146430682139426970820864276322564054320996503716368604641809196544929212678114449080765683010828171658052171878283443796436206652582424500418377898296330521820418327775939717214641622813");
        g = new BigInteger("130061477972544545413085647006475706101463355894791236593049191588006481360609853881647773411707401104636320439963372218249619404282485368443895767482232388747183738433715051827984361088798758894404563139527415286956932285744248967716619452302501549290497201518217605225203869832405927553034454336207873427691");
        
        a = new BigInteger(bitLength, rnd);
        
        BigInteger A = g.modPow(a, p);
        
        RMIStoreClientHelper.authenticationObj.keyExchange(A);
//        RMIStoreClientHelper.authenticationObj.login(username, password);
    }//GEN-LAST:event_jButtonLoginActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RMIStoreClientAuthentication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RMIStoreClientAuthentication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RMIStoreClientAuthentication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RMIStoreClientAuthentication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RMIStoreClientAuthentication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonLogin;
    private javax.swing.JButton jButtonPrint;
    private javax.swing.JLabel jLabelInput1;
    private javax.swing.JLabel jLabelInput2;
    private javax.swing.JLabel jLabelOutput;
    private javax.swing.JLabel jLabelPassword;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JLabel jLabelUsername;
    private javax.swing.JPasswordField jPasswordField;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JTextField jTextFieldInput1;
    private javax.swing.JTextField jTextFieldInput2;
    private javax.swing.JTextField jTextFieldOutput;
    private javax.swing.JTextField jTextFieldUsername;
    // End of variables declaration//GEN-END:variables

    @Override
    public void doCallback(Object arguments) {
        Response args = (Response) arguments;
        int status = args.getResponseStatus();
            
        if("print".equals(args.getResponseStatus())) {
        }
        else if("login".equals(args.getCallbackName())) {
            if(status == 200) {
                jLabelStatus.setText("Online");
            }
            else {
                jLabelStatus.setText("Failed");
            }
        }
        else if("keyExchange".equals(args.getCallbackName())) {
            if(status == 200) {
                try {
                    BigInteger B = (BigInteger) args.getResponseArg();
                    BigInteger s = B.modPow(a, p);
                    
                    String username = jTextFieldUsername.getText();
                    String password = new String(jPasswordField.getPassword());
                    
                    MessageDigest sha = MessageDigest.getInstance("SHA-1");
                    byte[] key = sha.digest(s.toByteArray());
                    key = Arrays.copyOf(key, 16);
                    
                    SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");

                    // Instantiate the cipher
                    Cipher cipher = Cipher.getInstance("AES");
                    cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);

                    byte[] encryptedUsername = cipher.doFinal(username.getBytes());
                    byte[] encryptedPassword = cipher.doFinal(password.getBytes());
                    
                    String usernameString = Base64.encode(encryptedUsername);
                    String passwordString = Base64.encode(encryptedPassword);
                    
                    RMIStoreClientHelper.authenticationObj.login(usernameString, passwordString);
                } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException ex) {
                    Logger.getLogger(RMIStoreClientAuthentication.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else {
            }
        }
        setAllButtonEnabled(true);
    }

    private void setAllButtonEnabled(boolean b) {
        for(JButton commandButton : commandButtons) {
            commandButton.setEnabled(b);
        }
    }

    private void populatingCommandButtons() {
        commandButtons = new ArrayList<>();
        commandButtons.add(jButtonPrint);
    }

    private class RequestThread extends Thread {

        private int command;
        
        public RequestThread(int command) {
            this.command = command;
        }
        
        @Override
        public void run() {
            try {
                switch(command) {
                    case RMIStoreClientHelper.REGISTER_COMMAND:
                        RMIStoreClientHelper.clientRemoteObj = new ClientRemoteImpl();
                        
                        CustomerRemote customerRemote = rmistoreObj.register(jTextFieldOutput.getText(), RMIStoreClientHelper.clientRemoteObj);
                        RMIStoreClientHelper.customerRemoteObj = 
                                new CustomerRemoteThreadImpl(customerRemote);
                        
                        // Connect to Bank
                        Bank rmiBankObj = (Bank)Naming.lookup(
                                RMIStoreClientHelper.RMIBankName);
                        RMIStoreClientHelper.accountObj = new AccountThreadImpl(
                                rmiBankObj.getAccount(jTextFieldOutput.getText()));
                        
                        RMIStoreClientMain rmiStoreClientMain = new RMIStoreClientMain(
                            RMIStoreClientAuthentication.this, jTextFieldOutput.getText());
                        rmiStoreClientMain.setVisible(true);
                        
                        break;
                    case RMIStoreClientHelper.START_AUTH_COMMAND:
                        RMIStoreClientHelper.clientRemoteObj = new ClientRemoteImpl();
                        
                        // Connect to Authentication
                        try {
                            Authentication rmiAuthObj = (Authentication)Naming.lookup(
                                    RMIStoreClientHelper.RMIBankName);
                            RMIStoreClientHelper.authenticationObj = 
                                    new AuthenticationThreadImpl(rmiAuthObj);
                            RMIStoreClientHelper.authenticationObj.callback = 
                                    RMIStoreClientAuthentication.this;

                            RMIStoreClientHelper.authenticationObj.setLoader(jProgressBar);
                            setAllButtonEnabled(true);                        
                        }
                        catch(RemoteException e) {
                            System.out.println(e.getMessage());
                        }
                    
                        break;
                }
            }
            catch (RemoteException | NotBoundException | MalformedURLException | Rejected ex) {
                showMessageDialog(null, ex.getMessage());
                
                Logger.getLogger(RMIStoreClientAuthentication.class.getName()).
                        log(Level.SEVERE, null, ex);
            }
            finally {
                if(command != RMIStoreClientHelper.START_AUTH_COMMAND) {
                    setAllButtonEnabled(true);
                }
            }
        }
        
    }
}
